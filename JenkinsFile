@Library('shared_lib_1')_

node(label:'master') 
{
try
{
//########### Sending Job Start Email #################################

 stage('Job started Email Notification')
   {
   emailext (
      subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )
   } 

//##################### Initialization and GitHub set up ###########################

   stage('Initialization and Set up') 
   { 
      SetUpfile 'https://github.com/Haju123/MVC.git'
   }

//############ Build and Quality check with Sonar Qube ###########################

  stage('Build and Quality check with SonarQube')
  {
      SonarQube "Sonar","M3_HOME","http://104.43.255.181","cd54cbeeec7893946b3bba8d0ef1fd831e3222f6"
  }
 
 //#################### Sonar Quality Gate #########################################
     
   stage('Sonar Quality gate')
   {
       SonarQualityGate "Sonar"
   }
  
  //#################### Docker image creation and pushing to Docker hub #################
   
   stage('Build docker image for war file and pushing to hub')
   {
      DockerImage&Push "hajira/project","DockerHub"
   }
   
   
 //################## Storing war in JFrog Artifactory ##############################
   
   stage('Deploy artifacts')
   {
     artifactorylib "Artifactory","./target/*.jar","local-snapshot"
   }
   
//###################### Sending Success Notification #################################
   
 stage('Send Job Success Notification')
   {
      emailext (
      subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )
    }
  }
    
    catch(e)
    {
  //###################### Sending Failure Notification #################################
    
    stage('Send Job Failure Notification'){
      emailext (
      subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }

    currentBuild.result = 'FAILURE'

   }

}
